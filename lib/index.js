// Generated by CoffeeScript 1.9.3
(function() {
  var Emitter,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Emitter = require('component-emitter');

  module.exports = function(clazz) {
    var _emit, eventsStopped, stoppedInstances;
    stoppedInstances = [];
    eventsStopped = false;
    clazz.stopEvents = function() {
      return eventsStopped = true;
    };
    clazz.continueEvents = function() {
      var i, instance, len;
      eventsStopped = false;
      for (i = 0, len = stoppedInstances.length; i < len; i++) {
        instance = stoppedInstances[i];
        instance.__continueEvents();
      }
      return stoppedInstances.length = 0;
    };
    Emitter(clazz.prototype);
    _emit = clazz.prototype.emit;
    clazz.prototype.emit = function(type) {
      if (eventsStopped || (this.__postponedEvents != null)) {
        if (indexOf.call(stoppedInstances, this) < 0) {
          stoppedInstances.push(this);
        }
        if (this.__postponedEvents == null) {
          this.__postponedEvents = {};
        }
        return this.__postponedEvents[type] = arguments;
      } else {
        return _emit.apply(this, arguments);
      }
    };
    return clazz.prototype.__continueEvents = function() {
      var args, ref, type;
      ref = this.__postponedEvents;
      for (type in ref) {
        args = ref[type];
        _emit.apply(this, args);
      }
      return this.__postponedEvents = null;
    };
  };

}).call(this);
